<?xml version="1.0" encoding="UTF-8"?>
            <rss version='2.0'  xmlns:atom="http://www.w3.org/2005/Atom">
            <channel>
            <atom:link href="https://shinyaigeek.dev/getRss" rel="self" type="application/rss+xml" />
            <title>shinyaigeek.dev</title>
            <link>https://shinyaigeek.dev/</link>
            <description>見習いWeb developer兼大学生のブログ. 主にweb開発の知見について喋ります</description>
            <language>ja</language>
            <copyright>(C) Shinyaigeek All Rights Reserved.</copyright>
            <managingEditor>me@shinyaigeek.dev (Shinobu Hayashi)</managingEditor>
            <webMaster>me@shinyaigeek.dev (Shinobu Hayashi)</webMaster>
            <image>
                <url>https://storage.cloud.google.com/blog_assets_shinyaigeek/static/icon.png</url>
                <title>shinyaigeek.dev</title>
                <link>https://shinyaigeek.dev/</link>
                <width>32</width>
                <height>32</height>
            </image>
            
                <item>
                <title>ブラウザの上でブラウザを動かす | shinyaigeek.dev</title>
                <link>https://shinyaigeek.dev/post/browser-on-browser/</link>
                <description>自作ブラウザを実装した続きとして, Chrome ブラウザで自作ブラウザを動かす, ということをした際の学習ノートです.</description>
                <guid>https://shinyaigeek.dev/post/browser-on-browser/</guid>
                </item>
                    
                <item>
                <title>fastifyでstreamを配信する時生のnode/httpに書き込むとResponse Headerが書き込まれなくなる問題 | shinyaigeek.dev</title>
                <link>https://shinyaigeek.dev/post/fatsify-header-with-raw-write-to-node-http-on-stream/</link>
                <description>fastifyの `reply.header(key, value)` は header に書き込まれるべき key-value を呼び出されたタイミングで HTTP Response に書き込むのではなく, `res.send` のタイミングで書き込んでいます.
Stream を配信する際, `reply.raw.write` を呼び出してしまっていると Header は暗黙的に flush されてしまっており書き込めなくなってしまいます.

workaroundとしては, `reply.raw.write` の前に `reply.raw.setHeader` を呼び出し header の書き込みを fastify に任せるのではなく自分で担ってしまいこれを回避するのが良さそう.
</description>
                <guid>https://shinyaigeek.dev/post/fatsify-header-with-raw-write-to-node-http-on-stream/</guid>
                </item>
                    
                <item>
                <title>2020年の振り返りと次やりたいこと | shinyaigeek.dev</title>
                <link>https://shinyaigeek.dev/post/log-2020/</link>
                <description>今年の一年を一言で表すと「深化」の一年でした, 去年なあなあで理解していた部分など,　細かく突き詰めて理解できそれを元にわかる領域の問題に対して自分なりの意見考察をもって考えられるようになったような気がします.</description>
                <guid>https://shinyaigeek.dev/post/log-2020/</guid>
                </item>
                    
                <item>
                <title>ASTで僕の考えた最強のDXを実現する 〜自分のDXは自分で守っていけ〜 | shinyaigeek.dev</title>
                <link>https://shinyaigeek.dev/post/introduction-to-AST/</link>
                <description>ASTイジイジするのはいいぞ！！
* 難しくない
* 自分のDXを自分で守るというエキサイティングな体験ができる
* 触れる範囲が広がる
* プログラミングをやる限りお世話になる

と良いことづくめで最高なので布教したい

また, このブログは [https://docs.google.com/presentation/d/1Ykka2_NvseClPO2J_oFqRUb_sD6rZfYBU-XWnsdTn9U/edit?usp=sharing](https://docs.google.com/presentation/d/1Ykka2_NvseClPO2J_oFqRUb_sD6rZfYBU-XWnsdTn9U/edit?usp=sharing) の補助資料です. まあこの記事の方を読めば大丈夫です大丈夫です.
</description>
                <guid>https://shinyaigeek.dev/post/introduction-to-AST/</guid>
                </item>
                    
                <item>
                <title>CyberAgent主催『Web Speed Hackathon Online』参加ログ | shinyaigeek.dev</title>
                <link>https://shinyaigeek.dev/post/log-ca-web-speed-hackathon/</link>
                <description>Cyber Agent主催のWeb Speed Hackathon Online 4/25, 4/26に参加してきました. 結果は残念ながらレギュレーション違反で選外でしたが, とても楽しく刺激を得られたイベントになりました.

この混乱した情勢の中オンラインという形でシステムを整えて実施してくださったCyber Agentの皆さん, ありがとうございました.
</description>
                <guid>https://shinyaigeek.dev/post/log-ca-web-speed-hackathon/</guid>
                </item>
                    
                <item>
                <title>cloud flare workerで省エネSSRなBlogを目指す | shinyaigeek.dev</title>
                <link>https://shinyaigeek.dev/post/how-to-make-economic-ssr-with-clourflareworker/</link>
                <description>世は技術ブログ大時代. みんなはてなブログか[JAMstack](https://jamstack.org/)にその身を委ねていた. お手軽さを求めるならはてなブログ, あるいはそこにカスタマイズ性やスピードを求めてHeadlessCMSにコンテンツを追加して動的に静的サイトを更新していくJAMstackな構成を目指した. 実際今の時代, GatsbyjsなりNextjsでもcontentfulなどを組み込んだJAMstackのテンプレートがあるので, HeadlessCMSからAPIを取得して環境変数として設定して, 適切にCI/CDを組んであげればもうJAMstackによる高速でお手軽な技術ブログが完成します. すごい時代だ.でもそんな中, あえてSSRを用いた動的な構成にロマンを感じ動的なブログを構築しようとした男がいました, いや僕なんですけど. cloud runでNode.jsの上にexpressサーバーを生やして, そこでJSXをreact-domを通してhtmlにしています.

しかし一回のアクセスごとにexpressが立ち上がると時間がかかる(特にTTFB), そもそも従量課金制なのでアクセスのたびにサーバーを立ち上げるのでなく, 出来るだけキャッシュを効かせたい. 特にこの場合本質となるブログ記事はCMS上にあるのでそこを参照したい.

というのを叶えたく, edge-sideでスクリプトを動かしてキャッシュを動的に管理して更なる最適化を目指す, という取り組みをしてみます.
</description>
                <guid>https://shinyaigeek.dev/post/how-to-make-economic-ssr-with-clourflareworker/</guid>
                </item>
                    
                <item>
                <title>Next.jsとnow.shでブログを新しく作り替えた | shinyaigeek.dev</title>
                <link>https://shinyaigeek.dev/post/remake-blog-with-nextjs-nowsh/</link>
                <description>[Next.js 9](https://nextjs.org/blog/next-9)
 7月8日Next.jsのv9リリースが発表されました。

実はこのブログの前身もNext.jsで書かれていて書いた当時はまだv8でした。でv9リリースからおよそ5ヶ月が経ってやっと、重い腰を上げて自分のブログのアップデートを試みました。
ですが蓋を開けるとあら不思議、あまりの~~クソ~~コードぷりになかなか作業が進まない。
具体的に言ってしまうと@ts-ignoreとanyのオンパレードで下手したらJSのまま作業するよりも酷い代物が出来上がっていました。
そんなものをアップデートしようとしても全然コンパイルが通らず、しかもバカ遅い。
ちなみにこれが書き換える前のlighthouseのスコア、無慈悲な0点に涙を禁じ得ません。
そしてもう何もかもが無理になり一から作り直してしまうことにしました()
</description>
                <guid>https://shinyaigeek.dev/post/remake-blog-with-nextjs-nowsh/</guid>
                </item>
                    
                <item>
                <title>TypeScriptの反変とどう向き合うか | shinyaigeek.dev</title>
                <link>https://shinyaigeek.dev/post/what-is-TypeScript-s-reversal/</link>
                <description>お久しぶりです、しにゃいです。
TypeScript いいですよね、静的型付けにより今あなたが触っているプロジェクトをより安全に進めて行くことができます。
しかしそんな TypeScript さんもなんだこれは、といってしまうような一見よくわからない挙動をすることがあります。
この記事ではその中の一つともいえよう反変について扱っておこうかなと思います。
</description>
                <guid>https://shinyaigeek.dev/post/what-is-TypeScript-s-reversal/</guid>
                </item>
                    
                <item>
                <title>Reactアプリ小さめ構成with react-router 編 | shinyaigeek.dev</title>
                <link>https://shinyaigeek.dev/post/composition-react-app-with-react-router/</link>
                <description>この記事は前回の記事の続きという感じです。これまた初学者向け
[脱 create-react-app、React アプリの小さめ構築](https://www.shinyaigeek.com/p/22)

この記事を読めば create-react-app なしで react アプリを構築できる様になるのですが、その続きとしてこの記事では react-router について扱おうと思います(開発していて思いの外どぶったので)

react-router のエラー、割とありますよね.
ていうか公式の API なり Document なりがよくわからないって感じはします。
なんかよくわからないけど 404 エラーが出たり、CANNOT GET URL みたいなエラーが出たり、僕もこれでどぶって、いい感じの日本語記事が見つからなかったのもあってじゃあ紹介しておこうかなという感じです。
</description>
                <guid>https://shinyaigeek.dev/post/composition-react-app-with-react-router/</guid>
                </item>
                    
                <item>
                <title>脱create-react-app、Reactアプリの小さめ構築 | shinyaigeek.dev</title>
                <link>https://shinyaigeek.dev/post/without-create-react-app/</link>
                <description>突然ですがみなさん、React アプリ構築に create-react-app 使わないと出来ないのにフロントエンジニア名乗ってるなんてまさかですけどないですよね？？？webpack の設定いつも適当にコピペしてたりなんてしていませんよね？？？
(まあ僕も割とこんな感じだったので人の事は言えませんが)
今回は上記の煽りであ、やばいかもと思った人向けの記事です。
タイトルの通り create-react-app 無しでの React アプリ構築の手順(というか比較的小さい構築)をやっていこうかなと思います。(思ったより適当な日本語記事がなかったので)
webpack,TypeScript あたりを使ってやって行く予定です。
目標は"Hello React"と書き出すとこまでです。
え？？しょぼくない？？と思う方もいると思われますが、これ以降の簡単なアプリ作ったりってのは結構どの記事でもやられているのでそちらを参考にしてほしいなという感じです。

また特にモジュール積みのところでガンガン module についての記事を載せたり、公式のドキュメントを載せていますが、これはイマイチわからない人は読んだ方がいいんじゃない？というくらいの気持ちで載せたので読む体力がないのであれば今は飛ばしても結構かと思われます。いつか思い出した時にでも読んでください。
</description>
                <guid>https://shinyaigeek.dev/post/without-create-react-app/</guid>
                </item>
                    
                <item>
                <title>初めまして | shinyaigeek.dev</title>
                <link>https://shinyaigeek.dev/post/nice-to-meet-you/</link>
                <description>初めまして、しにゃいこと、林仁と言います。 ブログ始めてみました。 なんでアメブロやはてなブログなど既存のブログサービスを使わずにこんなダサくめんどくさそうなことをしたかというと単純に面白いかなと今日の朝思っちゃいまして
</description>
                <guid>https://shinyaigeek.dev/post/nice-to-meet-you/</guid>
                </item>
                    
            </channel>
            </rss>
          